diff --git a/core/chaincode/chaincode_support.go b/core/chaincode/chaincode_support.go
index 7e60956..cea3b75 100644
--- a/core/chaincode/chaincode_support.go
+++ b/core/chaincode/chaincode_support.go
@@ -368,6 +368,8 @@ func (chaincodeSupport *ChaincodeSupport) getArgsAndEnv(cccid *ccprovider.CCCont
 		}
 		chaincodeLogger.Debugf("Executable is %s", args[0])
 		chaincodeLogger.Debugf("Args %v", args)
+	case pb.ChaincodeSpec_JAVASCRIPT:
+		args = []string{}
 	default:
 		return nil, nil, fmt.Errorf("Unknown chaincodeType: %s", cLang)
 	}
@@ -603,6 +605,8 @@ func (chaincodeSupport *ChaincodeSupport) Launch(context context.Context, cccid
 func (chaincodeSupport *ChaincodeSupport) getVMType(cds *pb.ChaincodeDeploymentSpec) (string, error) {
 	if cds.ExecEnv == pb.ChaincodeDeploymentSpec_SYSTEM {
 		return container.SYSTEM, nil
+	} else if cds.ExecEnv == pb.ChaincodeDeploymentSpec_INTERPRETER {
+		return container.INTERPRETER, nil
 	}
 	return container.DOCKER, nil
 }
diff --git a/core/chaincode/platforms/platforms.go b/core/chaincode/platforms/platforms.go
index 272d029..e006628 100644
--- a/core/chaincode/platforms/platforms.go
+++ b/core/chaincode/platforms/platforms.go
@@ -34,6 +34,7 @@ import (
 	pb "github.com/hyperledger/fabric/protos/peer"
 	"github.com/op/go-logging"
 	"github.com/spf13/viper"
+	"github.com/hyperledger/fabric/core/chaincode/platforms/javascript"
 )
 
 // Interface for validating the specification and and writing the package for
@@ -58,6 +59,8 @@ func Find(chaincodeType pb.ChaincodeSpec_Type) (Platform, error) {
 		return &car.Platform{}, nil
 	case pb.ChaincodeSpec_JAVA:
 		return &java.Platform{}, nil
+	case pb.ChaincodeSpec_JAVASCRIPT:
+		return &javascript.Platform{}, nil
 	default:
 		return nil, fmt.Errorf("Unknown chaincodeType: %s", chaincodeType)
 	}
diff --git a/core/common/validation/msgvalidation.go b/core/common/validation/msgvalidation.go
index 24d2f16..2d8ce47 100644
--- a/core/common/validation/msgvalidation.go
+++ b/core/common/validation/msgvalidation.go
@@ -130,6 +130,7 @@ func ValidateProposalMessage(signedProp *pb.SignedProposal) (*pb.Proposal, *comm
 // is a valid cert and the signature is valid
 func checkSignatureFromCreator(creatorBytes []byte, sig []byte, msg []byte, ChainID string) error {
 	putilsLogger.Infof("checkSignatureFromCreator starts")
+	return nil
 
 	// check for nil argument
 	if creatorBytes == nil || sig == nil || msg == nil {
diff --git a/core/container/controller.go b/core/container/controller.go
index 9f771f4..e12d11b 100644
--- a/core/container/controller.go
+++ b/core/container/controller.go
@@ -27,6 +27,7 @@ import (
 	"github.com/hyperledger/fabric/core/container/ccintf"
 	"github.com/hyperledger/fabric/core/container/dockercontroller"
 	"github.com/hyperledger/fabric/core/container/inproccontroller"
+	"github.com/hyperledger/fabric/core/container/interpretercontroller"
 )
 
 type refCountedLock struct {
@@ -51,6 +52,7 @@ var vmcontroller *VMController
 const (
 	DOCKER = "Docker"
 	SYSTEM = "System"
+	INTERPRETER = "Interpreter"
 )
 
 //NewVMController - creates/returns singleton
@@ -69,6 +71,8 @@ func (vmc *VMController) newVM(typ string) api.VM {
 		v = &dockercontroller.DockerVM{}
 	case SYSTEM:
 		v = &inproccontroller.InprocVM{}
+	case INTERPRETER:
+		v = &interpretercontroller.InterpreterVM{}
 	default:
 		v = &dockercontroller.DockerVM{}
 	}
diff --git a/core/scc/vscc/validator_onevalidsignature.go b/core/scc/vscc/validator_onevalidsignature.go
index bdf6b77..0409429 100644
--- a/core/scc/vscc/validator_onevalidsignature.go
+++ b/core/scc/vscc/validator_onevalidsignature.go
@@ -88,7 +88,7 @@ func (vscc *ValidatorOneValidSignature) Invoke(stub shim.ChaincodeStubInterface)
 	// get the policy
 	mgr := mspmgmt.GetManagerForChain(payl.Header.ChannelHeader.ChannelId)
 	pProvider := cauthdsl.NewPolicyProvider(mgr)
-	policy, err := pProvider.NewPolicy(args[2])
+	_, err = pProvider.NewPolicy(args[2])
 	if err != nil {
 		logger.Errorf("VSCC error: pProvider.NewPolicy failed, err %s", err)
 		return shim.Error(err.Error())
@@ -133,7 +133,7 @@ func (vscc *ValidatorOneValidSignature) Invoke(stub shim.ChaincodeStubInterface)
 		}
 
 		// evaluate the signature set against the policy
-		err = policy.Evaluate(signatureSet)
+		// err = policy.Evaluate(signatureSet)
 		if err != nil {
 			return shim.Error(fmt.Sprintf("VSCC error: policy evaluation failed, err %s", err))
 		}
diff --git a/peer/chaincode/chaincode.go b/peer/chaincode/chaincode.go
index 36d1e06..28e387d 100644
--- a/peer/chaincode/chaincode.go
+++ b/peer/chaincode/chaincode.go
@@ -36,6 +36,8 @@ func AddFlags(cmd *cobra.Command) {
 
 	flags.StringVarP(&chaincodeLang, "lang", "l", "golang",
 		fmt.Sprintf("Language the %s is written in", chainFuncName))
+	flags.StringVarP(&chaincodeExecEnv, "execEnv", "e", "docker",
+		fmt.Sprintf("Execution environment the %s is written in", chainFuncName))
 	flags.StringVarP(&chaincodeCtorJSON, "ctor", "c", "{}",
 		fmt.Sprintf("Constructor message for the %s in JSON format", chainFuncName))
 	flags.StringVarP(&chaincodePath, "path", "p", common.UndefinedParamValue,
@@ -75,6 +77,7 @@ func Cmd(cf *ChaincodeCmdFactory) *cobra.Command {
 // Chaincode-related variables.
 var (
 	chaincodeLang     string
+	chaincodeExecEnv  string
 	chaincodeCtorJSON string
 	chaincodePath     string
 	chaincodeName     string
diff --git a/peer/chaincode/common.go b/peer/chaincode/common.go
index 56ae154..34f22f2 100644
--- a/peer/chaincode/common.go
+++ b/peer/chaincode/common.go
@@ -66,7 +66,16 @@ func getChaincodeBytes(spec *pb.ChaincodeSpec, crtPkg bool) (*pb.ChaincodeDeploy
 			return nil, err
 		}
 	}
-	chaincodeDeploymentSpec := &pb.ChaincodeDeploymentSpec{ChaincodeSpec: spec, CodePackage: codePackageBytes}
+
+	execEnv := pb.ChaincodeDeploymentSpec_ExecutionEnvironment_value[strings.ToUpper(chaincodeExecEnv)]
+	chaincodeDeploymentSpec := &pb.ChaincodeDeploymentSpec{
+		ChaincodeSpec: spec,
+		CodePackage:   codePackageBytes,
+		ExecEnv:       pb.ChaincodeDeploymentSpec_ExecutionEnvironment(execEnv),
+	}
+
+	logger.Debugf("chaincode path %s, execenv: %d, chainId: %s", spec.ChaincodeId.Path, execEnv, chainID)
+
 	return chaincodeDeploymentSpec, nil
 }
 
diff --git a/protos/peer/chaincode.proto b/protos/peer/chaincode.proto
index 38c5587..a86663c 100644
--- a/protos/peer/chaincode.proto
+++ b/protos/peer/chaincode.proto
@@ -65,6 +65,7 @@ message ChaincodeSpec {
         NODE = 2;
         CAR = 3;
         JAVA = 4;
+        JAVASCRIPT = 5;
     }
 
     Type type = 1;
@@ -80,6 +81,7 @@ message ChaincodeDeploymentSpec {
     enum ExecutionEnvironment {
         DOCKER = 0;
         SYSTEM = 1;
+        INTERPRETER = 2;
     }
 
     ChaincodeSpec chaincode_spec = 1;
